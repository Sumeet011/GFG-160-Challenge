Majority Element II
Difficulty: Medium
Accuracy: 48.1%
Submissions: 88K+
Points: 4

You are given an array of integers arr[], where each number represents a vote for a candidate. The task is to return the candidates that have votes greater than one-third of the total votes. If no such majority exists, return an empty array.

Note: The answer should be returned in increasing order.

Solution
To solve this problem, we can use a hash map (unordered_map) to count the frequency of each element in the array. We then check if the frequency of an element is greater than one-third of the total number of votes (i.e., arr.size() / 3). Finally, we return the result in increasing order.

Here is the solution in C++:

cpp
Copy code
class Solution {
public:
    // Function to find the majority elements in the array
    vector<int> findMajority(vector<int>& arr) {
        unordered_map<int, int> voteCount;
        vector<int> result;
        int threshold = arr.size() / 3;

        // Count the frequency of each element
        for (int num : arr) {
            voteCount[num]++;
        }

        // Collect elements with frequency greater than the threshold
        for (const auto& entry : voteCount) {
            if (entry.second > threshold) {
                result.push_back(entry.first);
            }
        }

        // Return the results in increasing order
        sort(result.begin(), result.end());
        return result;
    }
};
Explanation:
Counting Occurrences:
We iterate through the array arr[] and count how many times each element appears using an unordered map (voteCount).

Checking Majority:
For each element in the map, we check if its frequency is greater than arr.size() / 3. If so, it's a valid candidate.

Sorting the Result:
Finally, the candidates are sorted in increasing order before being returned.

Time Complexity:
O(n) for counting elements, where n is the number of elements in the array.
O(k log k) for sorting the result, where k is the number of candidates that appear more than one-third of the time.
This approach ensures that we efficiently find the majority elements in the array, meeting the problemâ€™s requirements with an optimal time complexity.
